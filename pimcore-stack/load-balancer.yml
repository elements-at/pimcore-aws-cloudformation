AWSTemplateFormatVersion: 2010-09-09
Description: "Application Load Balancer (ALB) with Target Groups for Blue / Green Deployment"

Parameters:
  UniqueAppName:
    Type: String
  DomainName:
    Type: String
  VpcId:
    Type: String
    Description: The VPC of the ECS cluster.
  Subnet1:
    Type: String
    Description: The Subnet 1 of the related VPC.
  Subnet2:
    Type: String
    Description: The Subnet 2 of the related VPC.
  SecurityGroup1:
    Type: String
    Description: The Security Group 1 of the related VPC.
  ExistingCertificateARN:
    Type: String
    Default: false

Conditions:
  InstallCertificate: !Equals [ !Ref ExistingCertificateARN, false ]

Resources:

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${UniqueAppName}-alb' #max 32. characters
      Scheme: internet-facing
      SecurityGroups: [ !GetAtt PublicLoadBalancerSecurityGroup.GroupId ]
      Subnets: [ !Ref Subnet1, !Ref Subnet2 ]
      Type: application

  ## SSL certificate. Requires validation, so consider installing a (wildcard) certificate upfront.
  PimcoreInstanceCert:
    Condition: InstallCertificate
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${UniqueAppName}.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Sub '${UniqueAppName}.${DomainName}'
          ValidationDomain: !Sub '${UniqueAppName}.${DomainName}'
      ValidationMethod: DNS

  ## link DNS with load balancer
  DNSRecord:
    DependsOn: PublicLoadBalancer
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub '${UniqueAppName}.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID

  HTTPListenerBlue:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Description: 'Default listener (blue group)'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BlueHttpTargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - !Ref PimcoreInstanceCert

  HTTPListenerGreen:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Description: 'blue/green test listener (not publicly accessible)'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref GreenHttpTargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 8080
      Protocol: HTTPS
      Certificates:
        - !Ref PimcoreInstanceCert

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${UniqueAppName}-load-balancer-security-group'
      GroupDescription: Access to the public facing load balancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${UniqueAppName}-load-balancer-security-group'

  # Assign a default target group for blue/green deployment.
  BlueHttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${UniqueAppName}-tg-blue'
      #  Check if your application is healthy within 20 = 10*2 seconds, compared to 2.5 mins = 30*5 seconds.
      HealthCheckIntervalSeconds: 10 # Default is 30.
      HealthyThresholdCount: 2       # Default is 5.
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300                  # Default is 300.
      TargetType: ip
      VpcId: !Ref VpcId

  # Assign an alternate target group for blue/green deployment.
  GreenHttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${UniqueAppName}-tg-green'
      #  Check if your application is healthy within 20 = 10*2 seconds, compared to 2.5 mins = 30*5 seconds.
      HealthCheckIntervalSeconds: 10 # Default is 30.
      HealthyThresholdCount: 2       # Default is 5.
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300                  # Default is 300.
      TargetType: ip
      VpcId: !Ref VpcId

# Register ALB traffic for security group of VPC
  SecurityGroup1IngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      #GroupName: !Sub '${UniqueAppName} - Security group 1 - ALB Ingress'
      Description: Ingress from the public ALB
      GroupId: !Ref SecurityGroup1
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

Outputs:
  loadBalancerSecurityGroupId:
    Value: !Ref PublicLoadBalancerSecurityGroup
  loadBalancerHostedZoneId:
    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID